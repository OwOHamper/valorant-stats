{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"inactiveColor\", \"activeColor\", \"errorColor\", \"backgroundColor\", \"fontSize\", \"fontColor\", \"fontFamily\", \"error\", \"errorFontSize\", \"errorFontFamily\", \"assistiveText\", \"assistiveTextFontSize\", \"assistiveTextColor\", \"assistiveFontFamily\", \"characterCount\", \"characterCountFontFamily\", \"characterCountColor\", \"characterCountFontSize\", \"paddingHorizontal\", \"paddingVertical\", \"roundness\", \"style\", \"placeholder\", \"trailingIcon\", \"value\", \"onChangeText\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useRef, forwardRef, useImperativeHandle, useEffect, useState, useCallback, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { LogBox } from \"react-native-web/dist/index\";\nimport Animated, { useSharedValue, withTiming, useAnimatedStyle, interpolate, Extrapolate, interpolateColor } from 'react-native-reanimated';\nvar InputOutlineComponent = forwardRef(function (props, ref) {\n  var _props$inactiveColor = props.inactiveColor,\n      inactiveColor = _props$inactiveColor === void 0 ? 'grey' : _props$inactiveColor,\n      _props$activeColor = props.activeColor,\n      activeColor = _props$activeColor === void 0 ? 'blue' : _props$activeColor,\n      _props$errorColor = props.errorColor,\n      errorColor = _props$errorColor === void 0 ? 'red' : _props$errorColor,\n      _props$backgroundColo = props.backgroundColor,\n      backgroundColor = _props$backgroundColo === void 0 ? 'white' : _props$backgroundColo,\n      _props$fontSize = props.fontSize,\n      fontSize = _props$fontSize === void 0 ? 14 : _props$fontSize,\n      _props$fontColor = props.fontColor,\n      fontColor = _props$fontColor === void 0 ? 'black' : _props$fontColor,\n      fontFamily = props.fontFamily,\n      error = props.error,\n      _props$errorFontSize = props.errorFontSize,\n      errorFontSize = _props$errorFontSize === void 0 ? 10 : _props$errorFontSize,\n      errorFontFamily = props.errorFontFamily,\n      assistiveText = props.assistiveText,\n      _props$assistiveTextF = props.assistiveTextFontSize,\n      assistiveTextFontSize = _props$assistiveTextF === void 0 ? 10 : _props$assistiveTextF,\n      _props$assistiveTextC = props.assistiveTextColor,\n      assistiveTextColor = _props$assistiveTextC === void 0 ? inactiveColor : _props$assistiveTextC,\n      assistiveFontFamily = props.assistiveFontFamily,\n      characterCount = props.characterCount,\n      characterCountFontFamily = props.characterCountFontFamily,\n      _props$characterCount = props.characterCountColor,\n      characterCountColor = _props$characterCount === void 0 ? inactiveColor : _props$characterCount,\n      _props$characterCount2 = props.characterCountFontSize,\n      characterCountFontSize = _props$characterCount2 === void 0 ? 10 : _props$characterCount2,\n      _props$paddingHorizon = props.paddingHorizontal,\n      paddingHorizontal = _props$paddingHorizon === void 0 ? 16 : _props$paddingHorizon,\n      _props$paddingVertica = props.paddingVertical,\n      paddingVertical = _props$paddingVertica === void 0 ? 12 : _props$paddingVertica,\n      _props$roundness = props.roundness,\n      roundness = _props$roundness === void 0 ? 5 : _props$roundness,\n      style = props.style,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? 'Placeholder' : _props$placeholder,\n      trailingIcon = props.trailingIcon,\n      _props$value = props.value,\n      _providedValue = _props$value === void 0 ? '' : _props$value,\n      onChangeText = props.onChangeText,\n      inputProps = _objectWithoutProperties(props, _excluded);\n\n  var _useState = useState(_providedValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var inputRef = useRef(null);\n  var placeholderMap = useSharedValue(_providedValue ? 1 : 0);\n  var placeholderSize = useSharedValue(0);\n  var colorMap = useSharedValue(0);\n\n  var focus = function focus() {\n    var _inputRef$current;\n\n    return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  };\n\n  var blur = function blur() {\n    var _inputRef$current2;\n\n    return (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.blur();\n  };\n\n  var isFocused = function isFocused() {\n    var _inputRef$current3;\n\n    return Boolean((_inputRef$current3 = inputRef.current) === null || _inputRef$current3 === void 0 ? void 0 : _inputRef$current3.isFocused());\n  };\n\n  var clear = function clear() {\n    var _inputRef$current4;\n\n    Boolean((_inputRef$current4 = inputRef.current) === null || _inputRef$current4 === void 0 ? void 0 : _inputRef$current4.clear());\n    setValue('');\n  };\n\n  var errorState = useCallback(function () {\n    return error !== null && error !== undefined;\n  }, [error]);\n\n  var handleFocus = function handleFocus() {\n    placeholderMap.value = withTiming(1);\n    if (!errorState()) colorMap.value = withTiming(1);\n    focus();\n  };\n\n  var handleBlur = function handleBlur() {\n    if (!value) placeholderMap.value = withTiming(0);\n    if (!errorState()) colorMap.value = withTiming(0);\n    blur();\n  };\n\n  var handleChangeText = function handleChangeText(text) {\n    onChangeText && onChangeText(text);\n    setValue(text);\n  };\n\n  var handlePlaceholderLayout = useCallback(function (_ref) {\n    var nativeEvent = _ref.nativeEvent;\n    var width = nativeEvent.layout.width;\n    placeholderSize.value = width;\n  }, [placeholderSize]);\n  var renderTrailingIcon = useCallback(function () {\n    if (trailingIcon) return trailingIcon({});\n    return null;\n  }, [trailingIcon]);\n  useEffect(function () {\n    if (_providedValue.length) placeholderMap.value = withTiming(1);\n    setValue(_providedValue);\n  }, [_providedValue, placeholderMap]);\n  useEffect(function () {\n    if (errorState()) {\n      colorMap.value = 2;\n    } else {\n      colorMap.value = isFocused() ? 1 : 0;\n    }\n  }, [error, colorMap, errorState]);\n  var animatedPlaceholderStyles = useAnimatedStyle(function () {\n    return {\n      transform: [{\n        translateY: interpolate(placeholderMap.value, [0, 1], [0, -(paddingVertical + fontSize * 0.7)])\n      }, {\n        scale: interpolate(placeholderMap.value, [0, 1], [1, 0.7])\n      }, {\n        translateX: interpolate(placeholderMap.value, [0, 1], [0, -placeholderSize.value * 0.2])\n      }]\n    };\n  });\n  var animatedPlaceholderTextStyles = useAnimatedStyle(function () {\n    return {\n      color: interpolateColor(colorMap.value, [0, 1, 2], [inactiveColor, activeColor, errorColor])\n    };\n  });\n  var animatedPlaceholderSpacerStyles = useAnimatedStyle(function () {\n    return {\n      width: interpolate(placeholderMap.value, [0, 1], [0, placeholderSize.value * 0.7 + 7], Extrapolate.CLAMP)\n    };\n  });\n  var animatedContainerStyle = useAnimatedStyle(function () {\n    return {\n      borderColor: placeholderSize.value > 0 ? interpolateColor(colorMap.value, [0, 1, 2], [inactiveColor, activeColor, errorColor]) : inactiveColor\n    };\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      focus: handleFocus,\n      blur: handleBlur,\n      isFocused: isFocused(),\n      clear: clear\n    };\n  });\n  var styles = StyleSheet.create({\n    container: {\n      borderWidth: 1,\n      borderRadius: roundness,\n      alignSelf: 'stretch',\n      flexDirection: 'row',\n      backgroundColor: backgroundColor\n    },\n    inputContainer: {\n      flex: 1,\n      paddingVertical: paddingVertical,\n      paddingHorizontal: paddingHorizontal,\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    },\n    input: {\n      flex: 1,\n      fontSize: fontSize,\n      fontFamily: fontFamily,\n      color: fontColor\n    },\n    placeholder: {\n      position: 'absolute',\n      top: paddingVertical,\n      left: paddingHorizontal\n    },\n    placeholderText: {\n      fontSize: fontSize,\n      fontFamily: fontFamily\n    },\n    placeholderSpacer: {\n      position: 'absolute',\n      top: -1,\n      left: paddingHorizontal - 3,\n      backgroundColor: backgroundColor,\n      height: 1\n    },\n    errorText: {\n      position: 'absolute',\n      color: errorColor,\n      fontSize: errorFontSize,\n      fontFamily: errorFontFamily,\n      bottom: -errorFontSize - 7,\n      left: paddingHorizontal\n    },\n    trailingIcon: {\n      position: 'absolute',\n      right: paddingHorizontal,\n      alignSelf: 'center'\n    },\n    counterText: {\n      position: 'absolute',\n      color: errorState() ? errorColor : characterCountColor,\n      fontSize: characterCountFontSize,\n      bottom: -characterCountFontSize - 7,\n      right: paddingHorizontal,\n      fontFamily: characterCountFontFamily\n    },\n    assistiveText: {\n      position: 'absolute',\n      color: assistiveTextColor,\n      fontSize: assistiveTextFontSize,\n      bottom: -assistiveTextFontSize - 7,\n      left: paddingHorizontal,\n      fontFamily: assistiveFontFamily\n    }\n  });\n  var placeholderStyle = useMemo(function () {\n    return [styles.placeholder, animatedPlaceholderStyles];\n  }, [styles.placeholder, animatedPlaceholderStyles]);\n  return React.createElement(Animated.View, {\n    style: [styles.container, animatedContainerStyle, style]\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: handleFocus\n  }, React.createElement(View, {\n    style: styles.inputContainer\n  }, React.createElement(TextInput, _extends({}, inputProps, {\n    ref: inputRef,\n    style: styles.input,\n    pointerEvents: isFocused() ? 'auto' : 'none',\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    maxLength: characterCount ? characterCount : undefined,\n    selectionColor: errorState() ? errorColor : activeColor,\n    placeholder: \"\",\n    value: value\n  })))), trailingIcon && React.createElement(View, {\n    style: styles.trailingIcon\n  }, renderTrailingIcon()), React.createElement(Animated.View, {\n    style: [styles.placeholderSpacer, animatedPlaceholderSpacerStyles]\n  }), React.createElement(Animated.View, {\n    style: placeholderStyle,\n    onLayout: handlePlaceholderLayout,\n    pointerEvents: \"none\"\n  }, React.createElement(Animated.Text, {\n    style: [styles.placeholderText, animatedPlaceholderTextStyles]\n  }, placeholder)), characterCount && React.createElement(Text, {\n    style: styles.counterText\n  }, value.length + \" / \" + characterCount), errorState() ? React.createElement(Text, {\n    style: [styles.errorText]\n  }, error) : assistiveText && React.createElement(Text, {\n    style: [styles.assistiveText]\n  }, assistiveText));\n});\nvar InputOutline = InputOutlineComponent;\nexport { InputOutline };\nLogBox.ignoreLogs(['You are setting the style `{ color: ... }` as a prop.']);","map":{"version":3,"sources":["InputOutline.tsx"],"names":["InputOutlineComponent","forwardRef","inactiveColor","activeColor","errorColor","backgroundColor","fontSize","fontColor","errorFontSize","assistiveTextFontSize","assistiveTextColor","characterCountColor","characterCountFontSize","paddingHorizontal","paddingVertical","roundness","placeholder","value","_providedValue","inputProps","useState","inputRef","useRef","placeholderMap","useSharedValue","placeholderSize","colorMap","focus","blur","isFocused","Boolean","clear","setValue","errorState","useCallback","error","handleFocus","withTiming","handleBlur","handleChangeText","text","onChangeText","handlePlaceholderLayout","nativeEvent","width","renderTrailingIcon","trailingIcon","useEffect","animatedPlaceholderStyles","useAnimatedStyle","transform","translateY","interpolate","scale","translateX","animatedPlaceholderTextStyles","color","interpolateColor","animatedPlaceholderSpacerStyles","Extrapolate","animatedContainerStyle","borderColor","useImperativeHandle","styles","container","borderWidth","borderRadius","alignSelf","flexDirection","inputContainer","flex","justifyContent","alignItems","input","fontFamily","position","top","left","placeholderText","placeholderSpacer","height","errorText","bottom","right","counterText","characterCountFontFamily","assistiveText","assistiveFontFamily","placeholderStyle","useMemo","characterCount","length","InputOutline","LogBox"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n  useState,\n  useCallback,\n  useMemo,\n} from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  TouchableWithoutFeedback,\n  View,\n  Text,\n  // @ts-ignore\n  LogBox,\n} from 'react-native';\nimport Animated, {\n  useSharedValue,\n  withTiming,\n  useAnimatedStyle,\n  interpolate,\n  Extrapolate,\n  interpolateColor,\n} from 'react-native-reanimated';\n\nexport interface InputOutlineMethods {\n  /**\n   * Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.\n   */\n  focus: () => void;\n  /**\n   * Removes focus from an input or view. This is the opposite of focus()\n   */\n  blur: () => void;\n  /**\n   * Returns current focus of input.\n   */\n  isFocused: Boolean;\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear: () => void;\n}\n\nexport interface InputOutlineProps extends TextInputProps {\n  /**\n   * Placeholder for the textinput.\n   * @default Placeholder\n   * @type string\n   */\n  placeholder?: string;\n  /**\n   * Font size for TextInput.\n   * @default 14\n   * @type number\n   */\n  fontSize?: number;\n  /**\n   * Color of TextInput font.\n   * @default 'black'\n   * @type string\n   */\n  fontColor?: string;\n  /**\n   * Font family for all fonts.\n   * @default undefined\n   * @type string\n   */\n  fontFamily?: string;\n  /**\n   * Vertical padding for TextInput Container. Used to calculate animations.\n   * @default 12\n   * @type number\n   */\n  paddingVertical?: number;\n  /**\n   * Vertical padding for TextInput Container.\n   * @default 16\n   * @type number\n   */\n  paddingHorizontal?: number;\n  /**\n   * Color when focused.\n   * @default 'blue'\n   * @type string\n   */\n  activeColor?: string;\n  /**\n   * Color when blurred (not focused).\n   * @default 'grey'\n   * @type string\n   */\n  inactiveColor?: string;\n  /**\n   * Background color of the InputOutline.\n   * @default 'white'\n   * @type string\n   */\n  backgroundColor?: string;\n  /**\n   * Error message is displayed. If anything is provided to error besides null or undefined, then the component is\n   * within an error state, thus displaying the error message provided here and errorColor.\n   * @default undefined\n   * @type string\n   */\n  error?: string;\n  /**\n   * Color that is displayed when in error state. Error state is anything that is not null or undefined.\n   * @default 'red'\n   * @type string\n   */\n  errorColor?: string;\n  /**\n   * Trailing Icon for the TextInput.\n   * @default undefined\n   * @type React.FC\n   */\n  trailingIcon?: React.FC;\n  /**\n   * Border radius applied to container.\n   * @default 5\n   * @type number\n   */\n  roundness?: number;\n  /**\n   * Will show a character count helper text and limit the characters being entered.\n   * @default undefined\n   * @type number\n   */\n  characterCount?: number;\n  characterCountFontSize?: number;\n  characterCountFontFamily?: string;\n  characterCountColor?: string;\n  /**\n   * Helper text that can be displayed to assist users with Inputs. `error` prop will override this.\n   * @default undefined\n   * @type string\n   */\n  assistiveText?: string;\n  /**\n   * Font size of assistive text.\n   * @default 10\n   * @type number\n   */\n  assistiveTextFontSize?: number;\n  /**\n   * Color of assistive text.\n   * @default inactiveColor\n   * @type string\n   */\n  assistiveTextColor?: string;\n  /**\n   * Font family of assistive text.\n   * @default undefined\n   * @type string\n   */\n  assistiveFontFamily?: string;\n  /**\n   * Font size of error text.\n   * @default 10\n   * @type number\n   */\n  errorFontSize?: number;\n  /**\n   * Font family of error text.\n   * @default undefined\n   * @type string\n   */\n  errorFontFamily?: string;\n}\n\ntype InputOutline = InputOutlineMethods;\n\nconst InputOutlineComponent = forwardRef<InputOutline, InputOutlineProps>(\n  (props, ref) => {\n    // establish provided props\n    const {\n      // theme colors\n      inactiveColor = 'grey',\n      activeColor = 'blue',\n      errorColor = 'red',\n      backgroundColor = 'white',\n\n      // fonts\n      fontSize = 14,\n      fontColor = 'black',\n      fontFamily,\n\n      error,\n      errorFontSize = 10,\n      errorFontFamily,\n\n      assistiveText,\n      assistiveTextFontSize = 10,\n      assistiveTextColor = inactiveColor,\n      assistiveFontFamily,\n\n      characterCount,\n      characterCountFontFamily,\n      characterCountColor = inactiveColor,\n      characterCountFontSize = 10,\n\n      // styling\n      paddingHorizontal = 16,\n      paddingVertical = 12,\n      roundness = 5,\n      style,\n\n      // features\n      placeholder = 'Placeholder',\n      trailingIcon,\n\n      // others\n      value: _providedValue = '',\n      onChangeText,\n      ...inputProps\n    } = props;\n    // value of input\n    const [value, setValue] = useState(_providedValue);\n\n    // animation vars\n    const inputRef = useRef<TextInput>(null);\n    const placeholderMap = useSharedValue(_providedValue ? 1 : 0);\n    const placeholderSize = useSharedValue(0);\n    const colorMap = useSharedValue(0);\n\n    // helper functinos\n    const focus = () => inputRef.current?.focus();\n    const blur = () => inputRef.current?.blur();\n    const isFocused = () => Boolean(inputRef.current?.isFocused());\n    const clear = () => {\n      Boolean(inputRef.current?.clear());\n      setValue('');\n    };\n\n    const errorState = useCallback(\n      () => error !== null && error !== undefined,\n      [error]\n    );\n\n    const handleFocus = () => {\n      placeholderMap.value = withTiming(1); // focused\n      if (!errorState()) colorMap.value = withTiming(1); // active\n      focus();\n    };\n\n    const handleBlur = () => {\n      if (!value) placeholderMap.value = withTiming(0); // blur\n      if (!errorState()) colorMap.value = withTiming(0); // inactive\n      blur();\n    };\n\n    const handleChangeText = (text: string) => {\n      onChangeText && onChangeText(text);\n      setValue(text);\n    };\n\n    const handlePlaceholderLayout = useCallback(\n      ({ nativeEvent }) => {\n        const { width } = nativeEvent.layout;\n        placeholderSize.value = width;\n      },\n      [placeholderSize]\n    );\n\n    const renderTrailingIcon = useCallback(() => {\n      if (trailingIcon) return trailingIcon({});\n      return null;\n    }, [trailingIcon]);\n\n    // handle value update\n    useEffect(() => {\n      if (_providedValue.length) placeholderMap.value = withTiming(1); // focused;\n      setValue(_providedValue);\n    }, [_providedValue, placeholderMap]);\n    // error handling\n    useEffect(() => {\n      if (errorState()) {\n        colorMap.value = 2; // error -- no animation here, snap to color immediately\n      } else {\n        colorMap.value = isFocused() ? 1 : 0; // to active or inactive color if focused\n      }\n    }, [error, colorMap, errorState]);\n\n    const animatedPlaceholderStyles = useAnimatedStyle(() => ({\n      transform: [\n        {\n          translateY: interpolate(\n            placeholderMap.value,\n            [0, 1],\n            [0, -(paddingVertical + fontSize * 0.7)]\n          ),\n        },\n        {\n          scale: interpolate(placeholderMap.value, [0, 1], [1, 0.7]),\n        },\n        {\n          translateX: interpolate(\n            placeholderMap.value,\n            [0, 1],\n            [0, -placeholderSize.value * 0.2]\n          ),\n        },\n      ],\n    }));\n\n    const animatedPlaceholderTextStyles = useAnimatedStyle(() => ({\n      color: interpolateColor(\n        colorMap.value,\n        [0, 1, 2],\n        [inactiveColor, activeColor, errorColor]\n      ),\n    }));\n\n    const animatedPlaceholderSpacerStyles = useAnimatedStyle(() => ({\n      width: interpolate(\n        placeholderMap.value,\n        [0, 1],\n        [0, placeholderSize.value * 0.7 + 7],\n        Extrapolate.CLAMP\n      ),\n    }));\n\n    const animatedContainerStyle = useAnimatedStyle(() => ({\n      borderColor:\n        placeholderSize.value > 0\n          ? interpolateColor(\n              colorMap.value,\n              [0, 1, 2],\n              [inactiveColor, activeColor, errorColor]\n            )\n          : inactiveColor,\n    }));\n\n    useImperativeHandle(ref, () => ({\n      focus: handleFocus,\n      blur: handleBlur,\n      isFocused: isFocused(),\n      clear: clear,\n    }));\n\n    const styles = StyleSheet.create({\n      container: {\n        borderWidth: 1,\n        borderRadius: roundness,\n        alignSelf: 'stretch',\n        flexDirection: 'row',\n        backgroundColor,\n      },\n      inputContainer: {\n        flex: 1,\n        paddingVertical,\n        paddingHorizontal,\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      },\n      input: {\n        flex: 1,\n        fontSize,\n        fontFamily,\n        color: fontColor,\n      },\n      placeholder: {\n        position: 'absolute',\n        top: paddingVertical,\n        left: paddingHorizontal,\n      },\n      placeholderText: {\n        fontSize,\n        fontFamily,\n      },\n      placeholderSpacer: {\n        position: 'absolute',\n        top: -1,\n        left: paddingHorizontal - 3,\n        backgroundColor,\n        height: 1,\n      },\n      errorText: {\n        position: 'absolute',\n        color: errorColor,\n        fontSize: errorFontSize,\n        fontFamily: errorFontFamily,\n        bottom: -errorFontSize - 7,\n        left: paddingHorizontal,\n      },\n      trailingIcon: {\n        position: 'absolute',\n        right: paddingHorizontal,\n        alignSelf: 'center',\n      },\n      counterText: {\n        position: 'absolute',\n        color: errorState() ? errorColor : characterCountColor,\n        fontSize: characterCountFontSize,\n        bottom: -characterCountFontSize - 7,\n        right: paddingHorizontal,\n        fontFamily: characterCountFontFamily,\n      },\n      assistiveText: {\n        position: 'absolute',\n        color: assistiveTextColor,\n        fontSize: assistiveTextFontSize,\n        bottom: -assistiveTextFontSize - 7,\n        left: paddingHorizontal,\n        fontFamily: assistiveFontFamily,\n      },\n    });\n\n    const placeholderStyle = useMemo(() => {\n      return [styles.placeholder, animatedPlaceholderStyles];\n    }, [styles.placeholder, animatedPlaceholderStyles]);\n\n    return (\n      <Animated.View style={[styles.container, animatedContainerStyle, style]}>\n        <TouchableWithoutFeedback onPress={handleFocus}>\n          <View style={styles.inputContainer}>\n            <TextInput\n              {...inputProps}\n              ref={inputRef}\n              style={styles.input}\n              pointerEvents={isFocused() ? 'auto' : 'none'}\n              onFocus={handleFocus}\n              onBlur={handleBlur}\n              onChangeText={handleChangeText}\n              maxLength={characterCount ? characterCount : undefined}\n              selectionColor={errorState() ? errorColor : activeColor}\n              placeholder=\"\"\n              value={value}\n            />\n          </View>\n        </TouchableWithoutFeedback>\n        {trailingIcon && (\n          <View style={styles.trailingIcon}>{renderTrailingIcon()}</View>\n        )}\n        <Animated.View\n          style={[styles.placeholderSpacer, animatedPlaceholderSpacerStyles]}\n        />\n        <Animated.View\n          style={placeholderStyle}\n          onLayout={handlePlaceholderLayout}\n          pointerEvents=\"none\"\n        >\n          <Animated.Text\n            style={[styles.placeholderText, animatedPlaceholderTextStyles]}\n          >\n            {placeholder}\n          </Animated.Text>\n        </Animated.View>\n        {characterCount && (\n          <Text\n            style={styles.counterText}\n          >{`${value.length} / ${characterCount}`}</Text>\n        )}\n        {errorState() ? (\n          <Text style={[styles.errorText]}>{error}</Text>\n        ) : (\n          assistiveText && (\n            <Text style={[styles.assistiveText]}>{assistiveText}</Text>\n          )\n        )}\n      </Animated.View>\n    );\n  }\n);\n\nconst InputOutline = InputOutlineComponent;\nexport { InputOutline };\n\n// color issue\nLogBox.ignoreLogs(['You are setting the style `{ color: ... }` as a prop.']);\n"]},"metadata":{},"sourceType":"module"}